@model AutoDrive.VM.BasicSalarySettingVM
@using AutoDriveResources
@{
    ViewBag.Title = Resources.BasicORChangedSalary;
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="x_content">
    <h2>@Resources.BasicORChangedSalary</h2>

    <div class="modal" id="myModel" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <a href="#" class="close" data-dismiss="modal">&times;</a>
                    <h4 id="modalTitle"></h4>
                </div>
                <div class="modal-body" id="create">
                    <form id="form">

                        <div class="form-horizontal">

                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            @Html.HiddenFor(m => m.ID, new { @id = "BasicSalarySettingID" })
                            <div class="form-group">
                                @Html.LabelFor(model => model.JobDegreeId, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.JobDegreeId, ViewBag.JobDegrees as SelectList, Resources.Choose, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.JobDegreeId, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.JobLevelId, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.JobLevelId, ViewBag.JobLevels as SelectList, Resources.Choose, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.JobLevelId, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Salary, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Salary, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Salary, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.ChangedSalary, htmlAttributes: new { @class = "control-label col-md-2", })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ChangedSalary, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ChangedSalary, "", new { @class = "text-danger" })
                                </div>
                            </div>


                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <a href="#" class="btn btn-primary" id="SaveBasicSalarySetting"></a>
                    <a href="#" class="btn btn-primary" data-dismiss="modal">@Resources.Cancel</a>
                </div>
            </div>
        </div>
    </div>



    <div class="modal" id="myModelDelete" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <a href="#" class="close" data-dismiss="modal">&times;</a>
                    <h4>@Resources.DeleteSalary</h4>
                </div>
                <div class="modal-body text-center" id="Delete">
                    <h2>@Resources.DeleteMessage</h2>
                </div>
                <div class="modal-footer">
                    <a href="#" class="btn btn-danger" id="DeleteSaveBasicSalarySetting">@Resources.Delete</a>
                    <a href="#" class="btn btn-primary" data-dismiss="modal">@Resources.Cancel</a>
                </div>
            </div>
        </div>
    </div>

    <div class="col-sm-12" id="con">
        <table id="BasicSalarySetting" class="table table-striped jambo_table bulk_action">
            <thead>
                <tr>
                    <th>@Resources.SerialNumber</th>
                    <th>@Resources.JobDegree</th>
                    <th>@Resources.JobLevel</th>
                    <th>@Resources.Salary</th>
                    <th>@Resources.ChangedSalary</th>
                    <th>@Resources.DeductionSetting</th>
                    <th>@Resources.Edit</th>
                    <th>@Resources.Delete</th>
                </tr>
            </thead>
        </table>

        <button type="button" class="btn btn-primary btn-lg btn-round navbar-fixed-bottom " onclick="Create()" data-toggle="popover" data-trigger="hover" data-placement="top" data-content="@Resources.AddSalary" style="left:74%;bottom:15%"><span class="glyphicon glyphicon-plus"></span></button>
    </div>

</div>
@section scripts{

    <script>
    let DeleteID;
    function Create() {
         $("span[class*='error']").text("")
            $("#form")[0].reset();
        $("#modalTitle").html("@Resources.AddSalary");
        $("#SaveBasicSalarySetting").html("@Resources.Add");
        $("#BasicSalarySettingID").val(0);
        $("#myModel").modal()
    }
    $("#Salary").keypress(function(event){
    var keycode = (event.keyCode ? event.keyCode : event.which);
    if(keycode == '13'){
        if (formValidation()) {
            Save()

        }
        else {
            $(".input-validation-error").focus();
        }
    }
    });
      $("#ChangedSalary").keypress(function(event){
    var keycode = (event.keyCode ? event.keyCode : event.which);
    if(keycode == '13'){
        if (formValidation()) {
           Save()

        }
        else {
            $(".input-validation-error").focus();
        }
    }
    });
    function formValidation() {
        if ($("#form").valid()) {
            return true;
        }
        return false;
    }
    function DeleteBasicSalarySetting(id) {
        debugger;

        $("#myModelDelete").modal('show');
        DeleteID = id;
    }

    $("#SaveBasicSalarySetting").click(function () {
        Save();
    });

    function EditBasicSalarySetting(id) {
        debugger;
        var url = "/BasicSalarySetting/getBasicSalarySettingByID?id=" + id;
        $.ajax({
            type: "GET",
            url: url,
            success: function (rs) {
                $("#modalTitle").html("@Resources.EditSalary");
                $("#SaveBasicSalarySetting").html("@Resources.Edit");
                $("#myModel").modal('show');
                 $("span[class*='error']").text("")
                 $("#form")[0].reset();
                $("#BasicSalarySettingID").val(rs.data.ID)
                $("#JobDegreeId").val(rs.data.JobDegreeId);
                $("#JobLevelId").val(rs.data.JobLevelId);
                $("#Salary").val(rs.data.Salary);
                $("#ChangedSalary").val(rs.data.ChangedSalary);

            }
        });
    }

    $("#DeleteSaveBasicSalarySetting").click(function () {
        debugger;
        $.ajax({
            type: "post",
            url: "/BasicSalarySetting/delete?id=" + DeleteID,

            success: function (response) {
                $("#myModelDelete").modal("hide");
                $("#BasicSalarySetting").DataTable().ajax.reload();
                toastr.success('@Messages.SalaryDleted ', '', { timeOut: 4000 })
            },
            error: function () {
                 toastr.error('@Messages.NotSuccessfulOperation', '@Messages.ErrorDeletion ', { timeOut: 3000 });
            }
        });
    });
    function Save() {
        if (!formValidation()) {
            return true;
        }

        var data = $("#form").serialize();
        $.ajax({
            type: "post",
            url: "/BasicSalarySetting/Save",
            data: data,
            success: function (response) {
                if (response.msg != "Model is null") {
                    if (response.msg == true) {

                        toastr.error('@Messages.LevelToJobDergee', '', { timeOut: 4000 });
                    }
                    else {

                        $("#BasicSalarySetting").DataTable().ajax.reload();
                        $("#form")[0].reset();

                        if (data.split("&")[0] == "ID=0") {
                            toastr.success('@Messages.SalarySaved ', '', { timeOut: 4000 });

                        }
                        else {
                            $("#myModel").modal("hide");
                            toastr.success('@Messages.SalaryEdited ', '', { timeOut: 4000 });
                        }
                    }

                }
                else {
                    if ($("#JobDegreeId").val() == "")
                        $("#JobDegreeValidation").show();
                    else
                        $("#JobDegreeValidation").hide();
                    if ($("#JobLevelId").val() == "")
                        $("#JobLevelValidation").show();
                    else
                        $("#JobLevelValidation").hide();

                    if ($("#Salary").val() == "")
                        $("#SalaryValidation").show();
                    else
                        $("#SalaryValidation").hide();
                    if ($("#ChangedSalary").val() == "")
                        $("#ChangedSalaryValidation").show();
                    else
                        $("#ChangedSalaryValidation").hide();
                    toastr.error('عمليه غير ناجحه', 'حدث خطأ اثناء الاضافه برجاء المحاوله مره اخري ', { timeOut: 3000 });
                }


            },
            error: function () {
                 if (data.split("&")[0] == "ID=0") {
                        toastr.error('@Messages.NotSuccessfulOperation', '@Messages.ErrorAdding ', { timeOut: 3000 });

                    }
                    else {
                        toastr.error('@Messages.NotSuccessfulOperation', '@Messages.ErrorModification ', { timeOut: 3000 });
                    }

            }
        });

    }
     function GetLanguage() {
        debugger;
                var EN = {
                    "sEmptyTable": "No data available in table",
                    "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                    "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                    "sInfoFiltered": "(filtered from _MAX_ total entries)",
                    "sInfoPostFix": "",
                    "sInfoThousands": ",",
                    "sLengthMenu": "Show _MENU_ entries",
                    "sLoadingRecords": "Loading...",
                    "sProcessing": "Processing...",
                    "sSearch": "Search:",
                    "sZeroRecords": "No matching records found",
                    "oPaginate": {
                        "sFirst": "First",
                        "sLast": "Last",
                        "sNext": "Next",
                        "sPrevious": "Previous"
                    },
                    "oAria": {
                        "sSortAscending": ": activate to sort column ascending",
                        "sSortDescending": ": activate to sort column descending"
                    }
                };
                var AR =
                {
                    "sEmptyTable": "ليست هناك بيانات متاحة في الجدول",
                    "sLoadingRecords": "جارٍ التحميل...",
                    "sProcessing": "جارٍ التحميل...",
                    "sLengthMenu": "أظهر _MENU_ مدخلات",
                    "sZeroRecords": "لم يعثر على أية سجلات",
                    "sInfo": "إظهار _START_ إلى _END_ من أصل _TOTAL_ مدخل",
                    "sInfoEmpty": "يعرض 0 إلى 0 من أصل 0 سجل",
                    "sInfoFiltered": "(منتقاة من مجموع _MAX_ مُدخل)",
                    "sInfoPostFix": "",
                    "sSearch": "ابحث:",
                    "sUrl": "",
                    "oPaginate": {
                        "sFirst": "الأول",
                        "sPrevious": "السابق",
                        "sNext": "التالي",
                        "sLast": "الأخير"
                    }
                };
                let LangFlag = @(System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.IsRightToLeft ?"true":"false");
                return (LangFlag == false ? EN : AR);
            }
    $(document).ready(function () {
        debugger
        let url = "/BasicSalarySetting/IncreasesDeductionsIndex/";
        $('#BasicSalarySetting').DataTable({
            "ajax": {
                'url': "@Url.Action("GetBasicSalarySetting","BasicSalarySetting")",
                'type': "GET"
            }, "columns": [
                {
                    "data": null, orderable: false,
                    "render": function (data, type, full, meta) {
                        return meta.row + 1;
                    }
                },
                { "data": "JobDegreeName" },
                { "data": "JobLeveLName" },
                { "data": "Salary" },
                { "data": "ChangedSalary" },{
                    "data": "ID", "render": function (data) {
                        return "<a class='btn btn-default ED' style='margin-top:3px' href='/Payroll/BasicSalarySetting/IncreasesDeductionsView/"+data+"'>@Resources.DeductionSetting</botton>"
                    }
                } ,{
                    "data": "ID", "render": function (data) {
                        return "<botton class='btn btn-primary ED' style='margin-top:3px' onclick='EditBasicSalarySetting(" + data + ")'><span class='glyphicon glyphicon-pencil'></span></botton>"
                    }
                },
                {
                    "data": "ID", "render": function (data) {
                        return "<botton class='btn btn-danger ED' style='margin-top:3px' onclick='DeleteBasicSalarySetting(" + data + ")'><span class='glyphicon glyphicon-trash'></span></botton>"
                    }
                },
            ], "language": GetLanguage()
        });
    });

    </script>
}


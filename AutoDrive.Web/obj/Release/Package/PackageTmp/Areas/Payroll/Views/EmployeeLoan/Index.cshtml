@using AutoDriveResources
@model AutoDrive.VM.AutoDrivePayroll.EmployeeLoanVM

@{
    ViewBag.Title = Resources.EmployeeLoan;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .LoanDateRight {
        text-align: right;
        padding-right: 5%;
    }

    .LoanDateLeft {
        text-align: left;
        padding-left: 5%;
    }
</style>
<style>

    .ui-autocomplete {
        position: absolute;
        top: 100%;
        left: 0;
        z-index: 2000 !important;
        float: left;
        display: none;
        min-width: 160px;
        padding: 4px 0;
        margin: 0 0 10px 25px;
        list-style: none;
        background-color: #ffffff;
        border-color: #ccc;
        border-color: rgba(0, 0, 0, 0.2);
        border-style: solid;
        border-width: 1px;
        -webkit-border-radius: 5px;
        -moz-border-radius: 5px;
        border-radius: 5px;
        -webkit-box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
        -moz-box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
        box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
        -webkit-background-clip: padding-box;
        -moz-background-clip: padding;
        background-clip: padding-box;
        *border-right-width: 2px;
        *border-bottom-width: 2px;
        color: black;
        padding-right: 2%;
    }

    .ui-menu-item > a.ui-corner-all {
        display: block;
        padding: 3px 15px;
        clear: both;
        font-weight: normal;
        line-height: 18px;
        color: #555555;
        white-space: nowrap;
        text-decoration: none;
    }

    .ui-state-hover, .ui-state-active {
        color: #ffffff;
        text-decoration: none;
        background-color: #0088cc;
        border-radius: 0px;
        -webkit-border-radius: 0px;
        -moz-border-radius: 0px;
        background-image: none;
    }

    .page-header {
        padding-bottom: 9px;
        margin: 40px 0 20px;
        border-bottom: 1px solid #0c0c0c;
    }
</style>

<div class="x_content">
    <h2>@Resources.EmployeeLoan</h2>

    <div class="modal" id="myModel" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <a href="#" class="close" onclick="Cancel()" data-dismiss="modal">&times;</a>
                    <h4 id="modalTitle"></h4>
                </div>
                <div class="modal-body" id="create">
                    <form id="form">
                        <div class="form-horizontal">
                            @Html.HiddenFor(m => m.ID, new { @id = "EmployeeLoanID" })
                            <div class="form-group">
                                @Html.LabelFor(model => model.EmployeeID, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    <input type="text" class="form-control" placeholder="@Messages.EmployeeSearch" id="EmpID" onkeydown="EmpChange()"  />
                                    @Html.ValidationMessageFor(model => model.EmployeeID, "", new { @class = "text-danger" })
                                    @Html.EditorFor(model => model.EmployeeID, new { htmlAttributes = new { @class = "form-control", @style = "visibility: hidden" } })

                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.LoanValue, htmlAttributes: new { @class = "control-label col-md-2" ,@style="margin-top: -20px;"})
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.LoanValue, new { htmlAttributes = new { @class = "form-control",@style="margin-top: -20px;" } })
                                    @Html.ValidationMessageFor(model => model.LoanValue, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.LoanDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.LoanDate, new { htmlAttributes = new { @class = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.IsRightToLeft ? "form-control LoanDateRight" : "form-control LoanDateLeft" } })
                                    @Html.ValidationMessageFor(model => model.LoanDate, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.FromMonth, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-4">
                                    @Html.EnumDropDownListFor(model => model.FromMonth, Resources.Choose, htmlAttributes: new { @class = "form-control", @style = "width:100%;", @onchange = "fromMonthChange()" })
                                    @Html.ValidationMessageFor(model => model.FromMonth, Messages.Required, new { @class = "text-danger", @style = "color:#a94442;display:none;", @id = "FromMonthValidation" })
                                </div>

                                <div class="col-md-4">
                                    @Html.DropDownListFor(model => model.FromYear, ViewBag.YearsLst as SelectList, htmlAttributes: new { @class = "form-control", @style = "width:100%;" })
                                    @Html.ValidationMessageFor(model => model.FromYear, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.ToMonth, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-4">
                                    @Html.EnumDropDownListFor(model => model.ToMonth, Resources.Choose, htmlAttributes: new { @class = "form-control", @style = "width:100%;", @onchange = "ToMonthChange()" })
                                    @Html.ValidationMessageFor(model => model.ToMonth, Messages.Required, new { @class = "text-danger", @style = "color:#a94442;display:none;", @id = "ToMonthValidation" })
                                </div>

                                <div class="col-md-4">
                                    @Html.DropDownListFor(model => model.ToYear, ViewBag.YearsLst as SelectList, htmlAttributes: new { @class = "form-control", @style = "width:100%;", @onchange = "ToYearChange()" })
                                    @Html.ValidationMessageFor(model => model.ToYear, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.MonthlyValue, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.MonthlyValue, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.MonthlyValue, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.LoanStatus, htmlAttributes: new { @class = "control-label col-md-2", @style = "display:none;",@id="LoanStatusLB" })
                                <div class="col-md-10">
                                    @Html.EnumDropDownListFor(model => model.LoanStatus, Resources.Choose, htmlAttributes: new { @class = "form-control", @style = "width:100%;display:none;",@onchange="LoanStatusChange()" })
                                    @Html.ValidationMessageFor(model => model.LoanStatus,  Messages.Required, new { @class = "text-danger", @style = "color:#a94442;display:none;", @id = "LoanStatusValidation" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.UnderPaymentOrPaid, htmlAttributes: new { @class = "control-label col-md-2", @style = "display:none;", @id = "UnderPaymentOrPaidLB" })
                                <div class="col-md-10">
                                    <div class="checkbox">
                                        @Html.DropDownListFor(model => model.UnderPaymentOrPaid, ViewBag.UnderPayORPaiedLST as SelectList, Resources.Choose, htmlAttributes: new { @class = "form-control", @style = "width:100%;display:none;",@onchange="UnderPaymentOrPaidChange()" })
                                        @Html.ValidationMessageFor(model => model.UnderPaymentOrPaid, Messages.Required, new { @class = "text-danger", @style = "color:#a94442;display:none;", @id = "UnderPaymentOrPaidValidation" })
                                    </div>
                                </div>
                            </div>
                        </div>

                    </form>
                </div>
                <div class="modal-footer">
                    <a href="#" class="btn btn-primary"  id="SaveEmployeeLoan"></a>
                    <a href="#" class="btn btn-primary"  onclick="Cancel()" data-dismiss="modal">@Resources.Cancel</a>
                </div>
            </div>
        </div>
    </div>



    <div class="modal" id="myModelDelete" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <a href="#" class="close" data-dismiss="modal">&times;</a>
                    <h4>@Resources.DeleteViolation</h4>
                </div>
                <div class="modal-body text-center" id="Delete">
                    <h2>@Resources.DeleteMessage</h2>
                </div>
                <div class="modal-footer">
                    <a href="#" class="btn btn-danger" id="DeleteLoan">@Resources.Delete</a>
                    <a href="#" class="btn btn-primary" data-dismiss="modal">@Resources.Cancel</a>
                </div>
            </div>
        </div>
    </div>

    <div class="col-sm-12" id="con">
        <table id="EmployeeLoanTB" class="table table-striped jambo_table bulk_action">
            <thead>
                <tr>
                    <th>@Resources.SerialNumber</th>
                    <th>@Resources.Employee</th>
                    <th>@Resources.LoanValue</th>
                    <th>@Resources.LoanDate</th>
                    <th>@Resources.FromMonth</th>
                    <th>@Resources.FromYear</th>
                    <th>@Resources.ToMonth</th>
                    <th>@Resources.ToYear</th>
                    <th>@Resources.MonthlyValue</th>
                    <th>@Resources.LoanStatus</th>
                    <th>@Resources.UnderPaymentOrPaid</th>
                    <th>@Resources.Edit</th>
                    <th>@Resources.Delete</th>
                </tr>
            </thead>
        </table>

        <button type="button" class="btn btn-primary btn-lg btn-round navbar-fixed-bottom " onclick="Create()" data-toggle="popover" data-trigger="hover" data-placement="top" data-content="@Resources.EmployeeLoanAdd" style="left:74%;bottom:15%"><span class="glyphicon glyphicon-plus"></span></button>
    </div>

</div>
@section scripts{

    <script>
    let DeleteID;
    let Displayflag = false;
         function Create() {
                $("span[class*='error']").text("")
                $("#form")[0].reset();
                $("#modalTitle").html("@Resources.EmployeeLoanAdd");
                $("#SaveEmployeeLoan").html("@Resources.Add");
                $("#EmployeeLoanID").val(0);
                $("#myModel").modal();
                $("#UnderPaymentOrPaid").hide();
                $("#UnderPaymentOrPaidLB").hide();
                Displayflag = false;
                $("#LoanStatusLB").hide();
                $("#LoanStatus").hide();
            }
    $(document).ready(function () {
        $("#LoanDate").datepicker({
            dateFormat: 'dd/mm/yy'
        }).on('change', function () {

        });
          $('#EmployeeLoanTB').DataTable({
                    "ajax": {
                        'url': "@Url.Action("GetEmployeeLoan","EmployeeLoan")",
                        'type': "GET"
                    }, "columns": [
                        {
                            "data": null, orderable: false,
                            "render": function (data, type, full, meta) {
                                return meta.row + 1;
                            },width: "2%"
                        },
                       
                        { "data": "EmpName",width:"10%" },
                        { "data": "LoanValue" ,width:"10%"},
                        
                        {
                            "data": "LoanDate", "render": function (data, type, row) {
                                if (data != null) {
                                    return moment(data).format('DD/MM/YYYY');
                                } else {
                                    return null;
                                }
                                
                            },width:"10%"
                        },
                        { "data": "FromMonthName" ,width:"10%"},
                        { "data": "fromYearName" ,width:"10%"},
                     { "data": "ToMonthName", width: "10%" },
                  { "data": "ToYearName", width: "10%" },
                  { "data": "MonthlyValue", width: "10%" },
                  { "data": "Status", width: "10%" },
                  { "data": "UnderPayORPaidName", width: "10%" },
                  {
                            "data": "ID", "render": function (data, type, row) {
                                if (row.check) {
                                    return "<botton class='btn btn-primary ED' style='margin-top:3px' onclick='EditEmployeeViolation(" + data + ")'><span class='glyphicon glyphicon-pencil'></span></botton>"

                                }
                                else {
                                    return "";
                                }

                            },"width": "10%"
                        },
                        {
                            "data": "ID", "render": function (data, type, row) {
                                if (row.check) {
                                    return "<botton class='btn btn-danger ED' style='margin-top:3px' onclick='DeleteEmployeeLoan(" + data + ")'><span class='glyphicon glyphicon-trash'></span></botton>"
                                } else {
                                    return "";
                                }
                            },"width": "10%"
                        }
                    ], "language": GetLanguage()
                });
    });
    function GetLanguage() {
                var EN = {
                    "sEmptyTable": "No data available in table",
                    "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                    "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                    "sInfoFiltered": "(filtered from _MAX_ total entries)",
                    "sInfoPostFix": "",
                    "sInfoThousands": ",",
                    "sLengthMenu": "Show _MENU_ entries",
                    "sLoadingRecords": "Loading...",
                    "sProcessing": "Processing...",
                    "sSearch": "Search:",
                    "sZeroRecords": "No matching records found",
                    "oPaginate": {
                        "sFirst": "First",
                        "sLast": "Last",
                        "sNext": "Next",
                        "sPrevious": "Previous"
                    },
                    "oAria": {
                        "sSortAscending": ": activate to sort column ascending",
                        "sSortDescending": ": activate to sort column descending"
                    }
                };
                var AR =
                {
                    "sEmptyTable": "ليست هناك بيانات متاحة في الجدول",
                    "sLoadingRecords": "جارٍ التحميل...",
                    "sProcessing": "جارٍ التحميل...",
                    "sLengthMenu": "أظهر _MENU_ مدخلات",
                    "sZeroRecords": "لم يعثر على أية سجلات",
                    "sInfo": "إظهار _START_ إلى _END_ من أصل _TOTAL_ مدخل",
                    "sInfoEmpty": "يعرض 0 إلى 0 من أصل 0 سجل",
                    "sInfoFiltered": "(منتقاة من مجموع _MAX_ مُدخل)",
                    "sInfoPostFix": "",
                    "sSearch": "ابحث:",
                    "sUrl": "",
                    "oPaginate": {
                        "sFirst": "الأول",
                        "sPrevious": "السابق",
                        "sNext": "التالي",
                        "sLast": "الأخير"
                    }
                };
                let LangFlag = @(System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.IsRightToLeft ?"true":"false");
                return (LangFlag == false ? EN : AR);
            }
    function ToMonthChange() {
        let EmployeeLoanID = parseInt($("#EmployeeLoanID").val());
        $("#ToMonthValidation").hide();
        var Month = parseInt($("#ToMonth").val());
        var Year = parseInt($("#ToYear").val());
        if (Month!=0) {
            if ((Year ==@DateTime.Now.Year && Month<@DateTime.Now.Month )||(Year<@DateTime.Now.Year )) {
                $("#UnderPaymentOrPaid").show();
                $("#UnderPaymentOrPaidLB").show();
                Displayflag = true;
            } else if(EmployeeLoanID==0){
                 $("#UnderPaymentOrPaid").hide();
                $("#UnderPaymentOrPaidLB").hide();
                Displayflag = false;
            }
        }
            }
    function ToYearChange() {
        let EmployeeLoanID = parseInt($("#EmployeeLoanID").val());
         var Month = parseInt($("#ToMonth").val());
        var Year = parseInt($("#ToYear").val());
        if (Month!=0) {
            if ((Year ==@DateTime.Now.Year && Month<@DateTime.Now.Month)||(Year<@DateTime.Now.Year)) {
                $("#UnderPaymentOrPaid").show();
                $("#UnderPaymentOrPaidLB").show();
                Displayflag = true;
            } else if(EmployeeLoanID==0){
                 $("#UnderPaymentOrPaid").hide();
                $("#UnderPaymentOrPaidLB").hide();
                Displayflag = false;
            }
        }
            }
     $("#EmpID").autocomplete({

                source: function (request, response) {
                    $.ajax({
                        url:"/EmployeeLoan/SearchEmployee",
                        dataType: "json",
                        data: { Text: request.term },
                        success: function (data) {
                            if (!data.length) {
                                $('#EmployeeID').val("")
                                $('#EmpID').val("")

                            }
                            else {

                                response($.map(data, function (item) {
                                    return { label: item.Name, value: item.Name, ss: item.ID };
                                }));
                            }
                        }
                    });
                },

                select: function (event, ui) {
                    $('#EmployeeID').val(ui.item.ss);
                },


     });
   
     $("#SaveEmployeeLoan").click(function () {
                Save();
     });
    function fromMonthChange() {
       $("#FromMonthValidation").hide();
    }
    function UnderPaymentOrPaidChange() {
        $("#UnderPaymentOrPaidValidation").hide();
    }
    $("#EmpID").keypress(function (event) {
           $("#EmployeeID-error").hide();
                var keycode = (event.keyCode ? event.keyCode : event.which);
                if (keycode == '13') {
                    if (formValidation()) {
                        Save()
                    }
                    else {
                        if ($("#EmpID").val()="") {
                            $("#EmpID").focus();
                        } else if ($("#LoanValue").val() = "") {
                            $("#LoanValue").focus();
                        }else if ($("#MonthlyValue").val() = "") {
                            $("#MonthlyValue").focus();
                        }
                    }
                }
     });
    $("#LoanValue").keypress(function (event) {
                var keycode = (event.keyCode ? event.keyCode : event.which);
                if (keycode == '13') {
                    if (formValidation()) {
                        Save()
                    }
                    else {
                        if ($("#EmpID").val()="") {
                            $("#EmpID").focus();
                        } else if ($("#LoanValue").val() = "") {
                            $("#LoanValue").focus();
                        }else if ($("#MonthlyValue").val() = "") {
                            $("#MonthlyValue").focus();
                        }
                    }
                }
    });
     $("#MonthlyValue").keypress(function (event) {
                var keycode = (event.keyCode ? event.keyCode : event.which);
                if (keycode == '13') {
                    if (formValidation()) {
                        Save()
                    }
                    else {
                        if ($("#EmpID").val()="") {
                            $("#EmpID").focus();
                        } else if ($("#LoanValue").val() = "") {
                            $("#LoanValue").focus();
                        }else if ($("#MonthlyValue").val() = "") {
                            $("#MonthlyValue").focus();
                        }
                    }
                }
     });
    function Cancel() {
        $("#ToMonthValidation").hide();
        $("#FromMonthValidation").hide();
        $("#UnderPaymentOrPaidValidation").hide();
        $("#LoanStatusValidation").hide();
    }
    function LoanStatusChange() {
        $("#LoanStatusValidation").hide();
    }
    function formValidation() {
        let EmployeeLoanID = parseInt($("#EmployeeLoanID").val());
        if (!($("#form").valid())||($("#ToMonth").val()=="0")||($("#FromMonth").val()=="0")||(Displayflag && $("#UnderPaymentOrPaid").val()=="")||(EmployeeLoanID>0 && $("#UnderPaymentOrPaid").val()=="")||(EmployeeLoanID>0 && $("#LoanStatus").val()=="0")) {
            if (($("#ToMonth").val()=="0")) {
                $("#ToMonthValidation").show();
            }
            if ($("#FromMonth").val()=="0") {
                $("#FromMonthValidation").show();
            }
            if ((Displayflag && $("#UnderPaymentOrPaid").val()=="")) {
                $("#UnderPaymentOrPaidValidation").show();
            }
            if (EmployeeLoanID > 0 && $("#UnderPaymentOrPaid").val() == "")
                $("#UnderPaymentOrPaidValidation").show();
            if (EmployeeLoanID > 0 && $("#LoanStatus").val() == "0")
                $("#LoanStatusValidation").show();
            return false
        }
        return true
    }
     function Save() {
                if (!formValidation()) {
                    return true;
                }
         if ($("#UnderPaymentOrPaid").val()=="") {
             $("#UnderPaymentOrPaid").val(false)
         }
               var data = $("#form").serialize();
                $.ajax({
                    type: "post",
                    url: "/EmployeeLoan/Save",
                    data: data,
                    success: function (response) {
                        if (response.msg != "Model is null") {
                          $("#ToMonthValidation").hide();
                          $("#FromMonthValidation").hide();
                          $("#UnderPaymentOrPaidValidation").hide();
                            if (response.msg == "true") {

                                $("#EmployeeLoanTB").DataTable().ajax.reload();
                                $("#form")[0].reset();
                                $("#UnderPaymentOrPaid").hide();
                                $("#UnderPaymentOrPaidLB").hide();
                                Displayflag = false;
                                if (data.split("&")[0] == "ID=0") {
                                    toastr.success('@Messages.LoanAdded ', '', { timeOut: 4000 });

                                }
                                else {

                                    $("#myModel").modal("hide");
                                    toastr.success('@Messages.LoanEdited ', '', { timeOut: 4000 });
                                }
                            } else {
                                 toastr.error(response.msg, '', { timeOut: 3000 });
                            }

                        }
                        else {

                          if (($("#ToMonth").val()=="0")) {
                                $("#ToMonthValidation").show();
                            }
                            if ($("#FromMonth").val()=="0") {
                                $("#FromMonthValidation").show();
                            }
                            if ((Displayflag && $("#UnderPaymentOrPaid").val()=="")) {
                                $("#UnderPaymentOrPaidValidation").show();
                            }
                            let EmployeeLoanID = parseInt($("#EmployeeLoanID").val());
                        if (EmployeeLoanID > 0 && $("#UnderPaymentOrPaid").val() == "")
                            $("#UnderPaymentOrPaidValidation").show();
                        if (EmployeeLoanID > 0 && $("#LoanStatus").val() == "0")
                            $("#LoanStatusValidation").show();
                            toastr.error('عمليه غير ناجحه', 'حدث خطأ اثناء الاضافه برجاء المحاوله مره اخري ', { timeOut: 3000 });
                        }


                    },
                    error: function () {
                        if (data.split("&")[0] == "ID=0") {
                            toastr.error('@Messages.NotSuccessfulOperation', '@Messages.ErrorAdding ', { timeOut: 3000 });

                        }
                        else {
                            toastr.error('@Messages.NotSuccessfulOperation', '@Messages.ErrorModification ', { timeOut: 3000 });
                        }

                    }
                });
    }
    function EmpChange() {
        if ($("#EmpID").val()=="") {
            $("#EmployeeID").val("")
        }
         
    }
    
    function DeleteEmployeeLoan(id) {
         $("#myModelDelete").modal('show');
                DeleteID = id;
            }
    
     $("#DeleteLoan").click(function () {
               
                $.ajax({
                    type: "post",
                    url: "/EmployeeLoan/delete?id=" + DeleteID,

                    success: function (response) {
                        $("#myModelDelete").modal("hide");
                        $("#EmployeeLoanTB").DataTable().ajax.reload();
                        toastr.success('@Messages.LoanDeleted', '', { timeOut: 4000 })
                    },
                    error: function () {
                        toastr.error('@Messages.NotSuccessfulOperation', '@Messages.ErrorDeletion ', { timeOut: 3000 });
                    }
                });
     });
    function EditEmployeeViolation(id) {
         var url = "/EmployeeLoan/getEmployeeLoanByID?id=" + id;
                $.ajax({
                    type: "GET",
                    url: url,
                    success: function (rs) {
                        $("#modalTitle").html("@Resources.editLoan");
                        $("#SaveEmployeeLoan").html("@Resources.Edit");
                        $("#myModel").modal('show');
                        $("span[class*='error']").text("")
                        $("#form")[0].reset();
                        $("#EmployeeLoanID").val(rs.data.ID)
                        $("#EmployeeID").val(rs.data.EmployeeID);
                        $("#LoanValue").val(rs.data.LoanValue);
                        if (rs.data.LoanDate!=null) {
                            $("#LoanDate").val(dateFormat(new Date(parseInt((rs.data.LoanDate).match(/\d+/)[0]))));
                        }
                        else
                            $("#LoanDate").val("");
                        $("#FromMonth").val(rs.data.FromMonth);
                        $("#FromYear").val(rs.data.FromYear);
                        $("#ToMonth").val(rs.data.ToMonth);
                        $("#ToYear").val(rs.data.ToYear);
                        $("#MonthlyValue").val(rs.data.MonthlyValue);
                        $("#LoanStatus").val(rs.data.LoanStatus);
                        $("#UnderPaymentOrPaid").val(rs.data.UnderPayORPaidName);
                        $("#EmpID").val(rs.data.EmpName)
                        $("#LoanStatusLB").show();
                        $("#LoanStatus").show();
                        $("#UnderPaymentOrPaidLB").show();
                        $("#UnderPaymentOrPaid").show();
                    }
                });
            }
    function dateFormat(d) {
                return  (d.getDate() + "").padStart(2, "0")
                    + "/" +((d.getMonth() + 1) + "").padStart(2, "0")
                    + "/" + d.getFullYear();
    }

    </script>

}


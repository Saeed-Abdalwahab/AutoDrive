
@model AutoDrive.VM.IncreasingDeductionSettingVM

@using AutoDriveResources
@using AutoDrive.Static
@{
    ViewBag.Title = Resources.DeductionSetting;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="x_content">
    <h2>@Resources.DeductionSetting</h2>
    <div class="modal" id="myModel" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <a href="#" class="close" data-dismiss="modal">&times;</a>
                    <h4 id="modalTitle"></h4>
                </div>
                <div class="modal-body" id="create">
                    <form id="form">

                        <div class="form-horizontal">

                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            @Html.HiddenFor(m => m.ID, new { @id = "IncreasingDeductionSettingID" })
                            <div class="form-group">
                                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @onkeyup = "ChangeName()" } })
                                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                    <span id="NameValdiation" style="color:#a94442;display:none;"></span>
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.EnName, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.EnName, new { htmlAttributes = new { @class = "form-control", @onkeyup = "ChangeENName()" } })
                                    @Html.ValidationMessageFor(model => model.EnName, "", new { @class = "text-danger" })
                                    <span id="EnNameValdiation" style="color:#a94442;display:none;"></span>
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Value, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Value, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Value, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.RatioOrValue, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EnumDropDownListFor(model => model.RatioOrValue, Resources.Choose, htmlAttributes: new { @class = "form-control", @style = "width:100%", @onchange = "RatioOrValueChange()" })
                                    @Html.ValidationMessageFor(model => model.RatioOrValue, "", new { @class = "text-danger" })
                                    <span style="color:#a94442;display:none;" id="RatioOrValueValidation">@Messages.RequiredRatio</span>
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.BasicSalaryOrAll, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EnumDropDownListFor(model => model.BasicSalaryOrAll, Resources.Choose, htmlAttributes: new { @class = "form-control", @style = "width:100%", @onchange = "BasicSalaryOrAllChange()",disabled = "disabled" })
                                    @Html.ValidationMessageFor(model => model.BasicSalaryOrAll,"" , new { @class = "text-danger" })
                                    <span style = "color:#a94442;display:none;"id = "BasicSalaryOrAllValidation">@Messages.RequiredBasicSalary</span>
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.IncreasesDeductionsTypeId, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.IncreasesDeductionsTypeId, ViewBag.Deductions as SelectList, Resources.Choose, htmlAttributes: new { @class = "form-control", @style = "width:100%" })
                                    @Html.ValidationMessageFor(model => model.IncreasesDeductionsTypeId, "", new { @class = "text-danger" })
                                </div>
                            </div>


                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <a href="#" class="btn btn-primary" id="SaveIncreasingDeductionSetting"></a>
                    <a href="#" class="btn btn-primary" data-dismiss="modal">@Resources.Cancel</a>
                </div>
            </div>
        </div>
    </div>
    <div class="modal" id="myModelDelete" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <a href="#" class="close" data-dismiss="modal">&times;</a>
                    <h4>@Resources.DelteDeduction</h4>
                </div>
                <div class="modal-body text-center" id="Delete">
                    <h2>@Resources.DeleteMessage</h2>
                </div>
                <div class="modal-footer">
                    <a href="#" class="btn btn-danger" id="DeleteIncreasingDeductionSetting">@Resources.Delete</a>
                    <a href="#" class="btn btn-primary" data-dismiss="modal">@Resources.Cancel</a>
                </div>
            </div>
        </div>
    </div>
    <div class="col-sm-12" id="con">

        <table id="IncreasingDeductionSetting" class="table table-striped jambo_table bulk_action">
            <thead>
                <tr>



                    <th>@Resources.SerialNumber</th>
                    <th>@Resources.ArName</th>
                    <th>@Resources.EnName</th>
                    <th>@Resources.Value </th>
                    <th>@Resources.Ratio</th>
                    <th>@Resources.BasicSalary</th>
                    <th>@Resources.Deduction</th>
                    <th>@Resources.Edit</th>
                    <th>@Resources.Delete</th>
                </tr>
            </thead>
        </table>

        <button type="button" class="btn btn-primary btn-lg btn-round navbar-fixed-bottom " onclick="Create()" data-toggle="popover" data-trigger="hover" data-placement="top" data-content="@Resources.AddDeduction" style="left:74%;bottom:15%"><span class="glyphicon glyphicon-plus"></span></button>
    </div>
</div>
@section scripts{

    <script>
    var DeleteID;
    function Create() {
        $("span[class*='error']").text("")
        $("#form")[0].reset();
        $("#modalTitle").html("@Resources.AddDeduction");
        $("#SaveIncreasingDeductionSetting").html("@Resources.Add");
        $("#IncreasingDeductionSettingID").val(0);
        $("#myModel").modal();
        $("#Name").focus();
        $('#BasicSalaryOrAll').prop("disabled", true);
    }
    $("#SaveIncreasingDeductionSetting").click(function () {
        Save();
    });
     $("#Name").keypress(function(event){
    var keycode = (event.keyCode ? event.keyCode : event.which);
    if(keycode == '13'){
        if (formValidation()) {
            Save()
        }
        else {
            if ($("#EnName").val() == "" && $("#Name").val() != "") {
                $("#EnName").focus();
            } else if ($("#Value").val() == "" && $("#Name").val() != "") {
                $("#Value").focus();
            }
            else if ($("#Name").val() == "") {
                $("#Name").focus();
            } else {
                 $("#RatioOrValue").focus();
            }
        }
    }
     });
     $("#EnName").keypress(function(event){
    var keycode = (event.keyCode ? event.keyCode : event.which);
    if(keycode == '13'){
        if (formValidation()) {
            Save()
        }
        else {
            if ($("#Name").val() == "" && $("#EnName").val() != "") {
                $("#Name").focus();
            } else if ($("#Value").val() == "" && $("#EnName").val() != "") {
                $("#Value").focus();
            }
            else if ($("#EnName").val() == "") {
                $("#EnName").focus();
            } else {
                 $("#RatioOrValue").focus();
            }
        }
    }
    });
      $("#Value").keypress(function(event){
    var keycode = (event.keyCode ? event.keyCode : event.which);
    if(keycode == '13'){
        if (formValidation()) {
           Save()

        }
        else {
             if ($("#Name").val() == "" && $("#Value").val() != "") {
                $("#Name").focus();
            } else if ($("#Value").val() != "" && $("#EnName").val() == "") {
                $("#EnName").focus();
            }
            else if ($("#Value").val() == "") {
                $("#Value").focus();
            } else {
                 $("#RatioOrValue").focus();
            }
        }
    }
      });
    function BasicSalaryOrAllChange() {
        $("#BasicSalaryOrAllValidation").hide();
    }
    function formValidation() {
        debugger;
        if (!($("#form").valid())||($("#BasicSalaryOrAll").val() == "0"&&$("#RatioOrValue").val() ==@((int)PayingType.Ratio))||($("#RatioOrValue").val()=="0")) {
            if (($("#BasicSalaryOrAll").val() == "0"&&$("#RatioOrValue").val() ==@((int)PayingType.Ratio))) {
                $("#BasicSalaryOrAllValidation").show()
            }
            if (($("#RatioOrValue").val()=="0")) {
                 $("#RatioOrValueValidation").show()
            }
            return false;
        }
        return true;
    }
    function Save() {
     if (!formValidation()) {
            return false;
        }
        debugger;
        var data = $("#form").serialize();
        $.ajax({
            type: "post",
            url: "/IncreasingDeductionSetting/Save",
            data: data,
            success: function (response) {
                if (response.msg != "Model is null") {
                    if (response.msg == true) {

                    }
                    else {

                        $("#IncreasingDeductionSetting").DataTable().ajax.reload();
                        $("#form")[0].reset();
                        $("#Name").focus();
                         $('#BasicSalaryOrAll').prop("disabled", true);
                        if (data.split("&")[0] == "ID=0") {
                            toastr.success('@Messages.DeductionSaved', '', { timeOut: 4000 });

                        }
                        else {
                            $("#myModel").modal("hide");
                            toastr.success('@Messages.DeductionEdited ', '', { timeOut: 4000 });
                        }
                    }

                }
                else {
                   if (($("#BasicSalaryOrAll").val() == "0"&&$("#RatioOrValue").val() ==@((int)PayingType.Ratio))) {
                $("#BasicSalaryOrAllValidation").show()
            }
                     if (($("#RatioOrValue").val()=="0")) {
                 $("#RatioOrValueValidation").show()
            }
                    toastr.error('عمليه غير ناجحه', 'حدث خطأ اثناء الاضافه برجاء المحاوله مره اخري ', { timeOut: 3000 });
                }


            },
            error: function () {

                      if (data.split("&")[0] == "ID=0") {
                        toastr.error('@Messages.NotSuccessfulOperation', '@Messages.ErrorAdding ', { timeOut: 3000 });

                    }
                    else {
                        toastr.error('@Messages.NotSuccessfulOperation', '@Messages.ErrorModification ', { timeOut: 3000 });
                    }
            }
        });

    }


    $(document).ready(function () {
        //  $("#create").html(PartialView("_Create"))
        $('#IncreasingDeductionSetting').DataTable({
            "ajax": {
                'url': "GetIncreasingDeductionSetting",
                'type': "GET"
            }, "columns": [
                {
                    "data": null, orderable: false,
                    "render": function (data, type, full, meta) {
                        return meta.row + 1;
                    }
                },
                { "data": "Name" },
                { "data": "EnName" },
                { "data": "Value" },
                { "data": "RatioORValueName" },
                { "data": "BasicSalaryORALLName" },
                { "data": "IncreasesDeductionsType" }, {
                    "data": "ID", "render": function (data) {
                        return "<botton class='btn btn-primary ED' style='margin-top:3px' onclick='EditIncreasingDeductionSetting(" + data + ")'><span class='glyphicon glyphicon-pencil'></span></botton>"
                    }
                },
                {
                    "data": "ID", "render": function (data) {
                        return "<botton class='btn btn-danger ED' style='margin-top:3px' onclick='DeleteIncreasingDeductionSetting(" + data + ")'><span class='glyphicon glyphicon-trash'></span></botton>"
                    }
                },
            ], "language": GetLanguage()
        });
    });
      function GetLanguage() {
        debugger;
                var EN = {
                    "sEmptyTable": "No data available in table",
                    "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                    "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                    "sInfoFiltered": "(filtered from _MAX_ total entries)",
                    "sInfoPostFix": "",
                    "sInfoThousands": ",",
                    "sLengthMenu": "Show _MENU_ entries",
                    "sLoadingRecords": "Loading...",
                    "sProcessing": "Processing...",
                    "sSearch": "Search:",
                    "sZeroRecords": "No matching records found",
                    "oPaginate": {
                        "sFirst": "First",
                        "sLast": "Last",
                        "sNext": "Next",
                        "sPrevious": "Previous"
                    },
                    "oAria": {
                        "sSortAscending": ": activate to sort column ascending",
                        "sSortDescending": ": activate to sort column descending"
                    }
                };
                var AR =
                {
                    "sEmptyTable": "ليست هناك بيانات متاحة في الجدول",
                    "sLoadingRecords": "جارٍ التحميل...",
                    "sProcessing": "جارٍ التحميل...",
                    "sLengthMenu": "أظهر _MENU_ مدخلات",
                    "sZeroRecords": "لم يعثر على أية سجلات",
                    "sInfo": "إظهار _START_ إلى _END_ من أصل _TOTAL_ مدخل",
                    "sInfoEmpty": "يعرض 0 إلى 0 من أصل 0 سجل",
                    "sInfoFiltered": "(منتقاة من مجموع _MAX_ مُدخل)",
                    "sInfoPostFix": "",
                    "sSearch": "ابحث:",
                    "sUrl": "",
                    "oPaginate": {
                        "sFirst": "الأول",
                        "sPrevious": "السابق",
                        "sNext": "التالي",
                        "sLast": "الأخير"
                    }
                };
                let LangFlag = @(System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.IsRightToLeft ?"true":"false");
                return (LangFlag == false ? EN : AR);
            }
    function EditIncreasingDeductionSetting(EditedID) {
        debugger;
        var url = "/IncreasingDeductionSetting/getIncreasingDeductionSettingByID?id=" + EditedID;
        $.ajax({
            type: "GET",
            url: url,
            success: function (rs) {
                $("#modalTitle").html("@Resources.EditDeduction");
                $("#SaveIncreasingDeductionSetting").html("@Resources.Edit");
                $("#myModel").modal('show');
                 $("span[class*='error']").text("")
                 $("#form")[0].reset();
                $("#IncreasingDeductionSettingID").val(rs.data.ID)
                $("#Name").val(rs.data.Name);
                $("#EnName").val(rs.data.EnName);
                $("#Value").val(rs.data.Value);
                $("#RatioOrValue").val(rs.data.RatioOrValue);
                $("#BasicSalaryOrAll").val(rs.data.BasicSalaryOrAll);
                $("#IncreasesDeductionsTypeId").val(rs.data.IncreasesDeductionsTypeId);
                RatioOrValueChange();
            }
        });
    }
    function DeleteIncreasingDeductionSetting(ID) {
        $("#myModelDelete").modal('show');
        DeleteID = ID;
    }
    $("#DeleteIncreasingDeductionSetting").click(function () {

        $.ajax({
            type: "post",
            url: "/IncreasingDeductionSetting/deleteIncreasingDeductionSetting?id=" + DeleteID,

            success: function (response) {
                $("#myModelDelete").modal("hide");
                $("#IncreasingDeductionSetting").DataTable().ajax.reload();
                toastr.success('@Messages.DeductionDeleted ', '', { timeOut: 4000 })
            },
            error: function () {
                $("#myModelDelete").modal("hide");
                $("#IncreasingDeductionSetting").DataTable().ajax.reload();
                toastr.error('@Messages.NotSuccessfulOperation', '@Messages.ErrorDeletion ', { timeOut: 3000 });
            }
        });
    });
    function ChangeENName() {
        debugger;
        let id =$("#IncreasingDeductionSettingID").val();
        let name = $("#EnName").val();
          var url = "/IncreasingDeductionSetting/CheckENName?Name="+name+"&Id="+id;
        $.ajax({
            type: "GET",
            url: url,
            success: function (rs) {
                if (rs.msg == false) {
                    $("#EnNameValdiation").show();
                    $("#EnNameValdiation").html('@Messages.NameValidationError');
                }
                else
                $("#EnNameValdiation").hide();
            }
        });
    }
    function ChangeName() {
         let id = $("#IncreasingDeductionSettingID").val();
        let name = $("#Name").val();
          var url = "/IncreasingDeductionSetting/CheckName?Name="+name+"&Id="+id;
        $.ajax({
            type: "GET",
            url: url,
            success: function (rs) {
                if (rs.msg == false) {
                    $("#NameValdiation").show();
                    $("#NameValdiation").html('@Messages.NameValidationError');
                }
                else
                $("#NameValdiation").hide();
            }
        });
            }
    function RatioOrValueChange() {
        $("#RatioOrValueValidation").hide();
        if ($("#RatioOrValue").val() ==@((int)PayingType.Value)) {
            $('#BasicSalaryOrAll').prop("disabled", true);
        } else {
             $('#BasicSalaryOrAll').prop("disabled", false);  
        }
    }
    </script>
}


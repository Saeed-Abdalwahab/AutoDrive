@using AutoDriveResources
@model AutoDrive.VM.AutoDriveHR.EmployeeVacationVM
@{
    ViewBag.Title = Resources.EmployeeVacation;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .DateToLeft{
        margin-left: -40%
    }
    .DateFromLeft{
            margin-left: -35%;
    }
    .DateFromRight{
            margin-right: -42%;
    }
    .DateToRight{
            margin-right: -42%;
    }
    .ui-autocomplete {
        position: absolute;
        top: 100%;
        left: 0;
        z-index: 2000 !important;
        float: left;
        display: none;
        min-width: 160px;
        padding: 4px 0;
        margin: 0 0 10px 25px;
        list-style: none;
        background-color: #ffffff;
        border-color: #ccc;
        border-color: rgba(0, 0, 0, 0.2);
        border-style: solid;
        border-width: 1px;
        -webkit-border-radius: 5px;
        -moz-border-radius: 5px;
        border-radius: 5px;
        -webkit-box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
        -moz-box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
        box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
        -webkit-background-clip: padding-box;
        -moz-background-clip: padding;
        background-clip: padding-box;
        *border-right-width: 2px;
        *border-bottom-width: 2px;
        color: black;
        padding-right: 2%;
    }

    .ui-menu-item > a.ui-corner-all {
        display: block;
        padding: 3px 15px;
        clear: both;
        font-weight: normal;
        line-height: 18px;
        color: #555555;
        white-space: nowrap;
        text-decoration: none;
    }

    .ui-state-hover, .ui-state-active {
        color: #ffffff;
        text-decoration: none;
        background-color: #0088cc;
        border-radius: 0px;
        -webkit-border-radius: 0px;
        -moz-border-radius: 0px;
        background-image: none;
    }

    .page-header {
        padding-bottom: 9px;
        margin: 40px 0 20px;
        border-bottom: 1px solid #0c0c0c;
    }
</style>

<div class="x_content">
    <h2>@Resources.EmployeeVacation</h2>
    <div class="modal" id="myModel" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <a href="#" class="close" data-dismiss="modal">&times;</a>
                    <h4 id="modalTitle"></h4>
                </div>
                <div class="modal-body" id="create">
                    <form id="form">

                        <div class="form-horizontal">
                            @Html.HiddenFor(m => m.ID, new { @id = "EmployeeVacationID" })
                            <div class="form-group">
                                @Html.LabelFor(model => model.EmployeeId, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    <input type="text" class="form-control" placeholder="@Messages.EmployeeSearch" id="EmpID" onkeydown="EmpChange()" />
                                    @Html.ValidationMessageFor(model => model.EmployeeId, "", new { @class = "text-danger" })
                                    @Html.EditorFor(model => model.EmployeeId, new { htmlAttributes = new { @class = "form-control", @style = "visibility: hidden" } })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.HolidayTypeId, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.HolidayTypeId,ViewBag.HolidayTypes as SelectList,Resources.Choose, htmlAttributes:new { @class = "form-control",@style="width:100%;" } )
                                    @Html.ValidationMessageFor(model => model.HolidayTypeId, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.FromDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.FromDate, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.FromDate, "", new { @class = "text-danger" })
                                </div>
                           
                                @Html.LabelFor(model => model.ToDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.ToDate, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ToDate, "", new { @class = "text-danger" })
                                   <span id="DateToValidation" style = "color:#a94442;display:none;">@Resources.DateToValidation</span>
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.NODays, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.NODays, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.NODays, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
                                </div>
                            </div>


                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <a href="#" class="btn btn-primary" id="SaveEmployeeVacation"></a>
                    <a href="#" class="btn btn-primary" data-dismiss="modal">@Resources.Cancel</a>
                </div>
            </div>
        </div>
    </div>
    <div class="modal" id="myModelDelete" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <a href="#" class="close" data-dismiss="modal">&times;</a>
                    <h4>@Resources.deleteEmployeeVacation</h4>
                </div>
                <div class="modal-body text-center" id="Delete">
                    <h2>@Resources.DeleteMessage</h2>
                </div>
                <div class="modal-footer">
                    <a href="#" class="btn btn-danger" id="DeleteEmployeeVacation">@Resources.Delete</a>
                    <a href="#" class="btn btn-primary" data-dismiss="modal">@Resources.Cancel</a>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="form-group">
            @Html.Label(Resources.FromDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.TextBox("DateFrom","", htmlAttributes : new { @class = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.IsRightToLeft ?"DateFromRight form-control":"DateFromLeft form-control", @id = "DateFrom",@style="background: lightgray;width: 100%;" } )
                <span id="DateFromValidation" style="color:#a94442;display:none">@Messages.Required</span>
            </div>
            @Html.Label(Resources.ToDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-3">
            @Html.TextBox("DateTo","", htmlAttributes : new { @class =System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.IsRightToLeft ?"DateToRight form-control":"DateToLeft form-control", @id = "DateTo",@style="background: lightgray;width: 100%;"  } )
            <span id="ToDateValidation" style="color:#a94442;display:none">@Messages.Required</span>
            <span id="GreaterThanValidation" style="color:#a94442;display:none;">@Resources.DateToValidation</span>
        </div>
            <div class="col-md-2"><button class="btn btn-primary" onclick="Search()">@Resources.Search</button></div>
        </div>
    </div>
    <div class="col-sm-12" id="con">

        <table id="EmployeeVacationTB" class="table table-striped jambo_table bulk_action">
            <thead>
                <tr>
                    <th>@Resources.SerialNumber</th>
                    <th>@Resources.Employee</th>
                    <th>@Resources.HolidayType</th>
                    <th>@Resources.FromDate </th>
                    <th>@Resources.ToDate</th>
                    <th>@Resources.NODays</th>
                    <th>@Resources.Notes</th>
                    <th>@Resources.Edit</th>
                    <th>@Resources.Delete</th>
                </tr>
            </thead>
        </table>

        <button type="button" class="btn btn-primary btn-lg btn-round navbar-fixed-bottom " onclick="Create()" data-toggle="popover" data-trigger="hover" data-placement="top" data-content="@Resources.AddDeduction" style="left:74%;bottom:15%"><span class="glyphicon glyphicon-plus"></span></button>
    </div>
</div>
@section scripts{

    <script>
    function Valid() {
        debugger;
          let DateTo = $("#DateTo").val();
          let DateFrom = $("#DateFrom").val();
        if ($("#DateTo").val()==""||$("#DateFrom").val()==""||checkDates(DateFrom, DateTo)) {
            if ($("#DateTo").val()=="") {
                $("#ToDateValidation").show();
            }
            if ($("#DateFrom").val()=="") {
                $("#DateFromValidation").show();
            }
            if (checkDates(DateFrom, DateTo)) {
                $("#GreaterThanValidation").show();
            }
            return false;
        }
        return true;
    }
    function Search() {
        debugger;
        if (!Valid()) {
            return false;
        }
        To = $("#DateTo").val();
        From=$("#DateFrom").val();
         $("#EmployeeVacationTB").DataTable().ajax.reload();
    }
    var DeleteID;
    function Create() {
        $("span[class*='error']").text("")
        $("#form")[0].reset();
        $("#modalTitle").html("@Resources.AddEmployeeVacation");
        $("#SaveEmployeeVacation").html("@Resources.Add");
        $("#EmployeeVacationID").val(0);
        $("#myModel").modal();
        $("#EmpID").focus();
     }
     $("#EmpID").autocomplete({

                source: function (request, response) {
                    $.ajax({
                        url:"/EmployeeVacation/SearchEmployee",
                        dataType: "json",
                        data: { Text: request.term },
                        success: function (data) {
                            if (!data.length) {
                                $('#EmployeeId').val("")
                                $('#EmpID').val("")

                            }
                            else {

                                response($.map(data, function (item) {
                                    return { label: item.Name, value: item.Name, ss: item.ID };
                                }));
                            }
                        }
                    });
                },

                select: function (event, ui) {
                    $('#EmployeeId').val(ui.item.ss);
                },


     });
     function EmpChange() {
        $("#EmployeeId-error").hide();
        if ($("#EmpID").val()=="") {
               $('#EmployeeId').val("")

        }
         
    }
    $("#SaveEmployeeVacation").click(function () {
        Save();
    });
     $("#EmpID").keypress(function (event) {
                var keycode = (event.keyCode ? event.keyCode : event.which);
                if (keycode == '13') {
                    if (formValidation()) {
                        Save()
                    }
                    else {
                        if ($("#EmpID").val()=="") {
                            $("#EmpID").focus();
                        } else if ($("#NODays").val() == "") {
                            $("#NODays").focus();
                        }
                    }
                }
     });
     $("#NODays").keypress(function (event) {
                var keycode = (event.keyCode ? event.keyCode : event.which);
                if (keycode == '13') {
                    if (formValidation()) {
                        Save()
                    }
                    else {
                        if ($("#EmpID").val()=="") {
                            $("#EmpID").focus();
                        } else if ($("#NODays").val() == "") {
                            $("#NODays").focus();
                        }
                    }
                }
     });
    $("#Notes").keypress(function (event) {
                var keycode = (event.keyCode ? event.keyCode : event.which);
                if (keycode == '13') {
                    if (formValidation()) {
                        Save()
                    }
                    else {
                        if ($("#EmpID").val()=="") {
                            $("#EmpID").focus();
                        } else if ($("#NODays").val() == "") {
                            $("#NODays").focus();
                        }
                    }
                }
     });
    function formValidation() {
        debugger;
       let DateFrom = $("#FromDate").val();
        let DateTo = $("#ToDate").val()
        let checkDate = checkDates(DateFrom, DateTo);
                
        if (!($("#form").valid())||(checkDate)) {
            if (checkDate) {
                $("#DateToValidation").show();
            } else {
                $("#DateToValidation").hide();

            }
            return false;
        }
        return true;
    }
    function Save() {
     if (!formValidation()) {
            return false;
        }
        var data = $("#form").serialize();
        $.ajax({
            type: "post",
            url: "/EmployeeVacation/Save",
            data: data,
            success: function (response) {
                if (response.msg != "Model is null") {
                    if (response.msg == "true") {
                        $("#EmployeeVacationTB").DataTable().ajax.reload();
                        $("#form")[0].reset();
                        $("#EmpID").focus();
                        if (data.split("&")[0] == "ID=0") {
                            toastr.success('@Messages.EmployeeVacationAdded', '', { timeOut: 4000 });

                        }
                        else {
                            $("#myModel").modal("hide");
                            toastr.success('@Messages.EmployeeVacationEdited ', '', { timeOut: 4000 });
                        }
                    }
                    else if (response.msg == "Employee Vacation Account is null") {
                        toastr.error('@Messages.NotExistedBalance', '', { timeOut: 3000 });
                    }
                    else if (response.msg == "Employee Vacation is not null" || response.msg == "part of holiday is part from another holiday") {
                        toastr.error('@Messages.ExistedVacation', '', { timeOut: 3000 });
                    }
                    else if (response.msg == "Employee Vacation Account is not enough") {
                        toastr.error('@Messages.NotEnoughBalance', '', { timeOut: 3000 });
                    } 
                }
                else {
                  
                        toastr.error('@Messages.NotSuccessfulOperation', '', { timeOut: 3000 });

                }


            },
            error: function () {

                      if (data.split("&")[0] == "ID=0") {
                        toastr.error('@Messages.NotSuccessfulOperation', '@Messages.ErrorAdding ', { timeOut: 3000 });

                    }
                    else {
                        toastr.error('@Messages.NotSuccessfulOperation', '@Messages.ErrorModification ', { timeOut: 3000 });
                    }
            }
        });

    }
    let From;
    let To;
    $(document).ready(function () {
        $("#DateTo").datepicker({
            dateFormat: 'dd/mm/yy'
        }).on('change', function () {
            debugger;
            $("#ToDateValidation").hide();
            let DateTo = $("#DateTo").val();
          let DateFrom = $("#DateFrom").val();
            if (checkDates(DateFrom, DateTo)) {
                $("#GreaterThanValidation").show();
            } else {
                $("#GreaterThanValidation").hide();
            }

        });
         $("#DateFrom").datepicker({
            dateFormat: 'dd/mm/yy'
         }).on('change', function () {
             debugger;
            $("#DateFromValidation").hide();
              let DateTo = $("#DateTo").val();
          let DateFrom = $("#DateFrom").val();
            if (checkDates(DateFrom, DateTo)) {
                $("#GreaterThanValidation").show();
            } else {
                $("#GreaterThanValidation").hide();
            }

        });
        //
        $("#DateFrom").val("@ViewBag.DateFrom");
        $("#DateTo").val("@ViewBag.DateTo");
        To = $("#DateTo").val();
        From=$("#DateFrom").val();
        $("#FromDate").datepicker({
            dateFormat: 'dd/mm/yy'
        }).on('change', function () {
            debugger;
            $("#FromDate-error").hide();
             let DateFrom = $("#FromDate").val();
            let DateTo =$("#ToDate").val()
                if (checkDates(DateFrom,DateTo)) {
                    $("#DateToValidation").show();
                    $("#NODays").val("");
            } else {
                $("#DateToValidation").hide();
                 CalculateDays(DateFrom, DateTo);
            }
           
        });
        $("#ToDate").datepicker({
            dateFormat: 'dd/mm/yy'
        }).on('change', function () {
            debugger;
            $("#ToDate-error").hide();
            let DateFrom = $("#FromDate").val();
            let DateTo =$("#ToDate").val()
                if (checkDates(DateFrom,DateTo)) {
                    $("#DateToValidation").show();
                    $("#NODays").val("")
            } else {
                $("#DateToValidation").hide();
                CalculateDays(DateFrom, DateTo);
            }
         
            
        });
         $('#EmployeeVacationTB').DataTable({
                    "ajax": {
                        'url': "/EmployeeVacation/GetVacations",
                        'type': "GET",
                 'data': function (data) {
                     data.DateFrom = From;
                     data.DateTo = To;
                    },
                'traditional': true,
                  'cache': false,
                    }, "columns": [
                        {
                            "data": null, orderable: false,
                            "render": function (data, type, full, meta) {
                                return meta.row + 1;
                            },width: "2%"
                        },
                       
                        { "data": "EmpName",width:"10%" },
                        { "data": "HolidayTypeName" ,width:"10%"},
                        {
                            "data": "FromDate", "render": function (data, type, row) {
                                 return moment(data).format('DD/MM/YYYY');
                                
                            },width:"10%"
                        },
                        
                        {
                            "data": "ToDate", "render": function (data, type, row) {
                                 return moment(data).format('DD/MM/YYYY');
                                
                            },width:"10%"
                 },
                 { "data": "NODays", width: "10%" },
                 { "data": "Notes" ,width:"10%"},
                 
                  {
                            "data": "ID", "render": function (data, type, row) {
                          if (row.check) {
                              return "<botton class='btn btn-primary ED' style='margin-top:3px' onclick='EditEmployeeVacation(" + data + ")'><span class='glyphicon glyphicon-pencil'></span></botton>"
                          } else {
                              return "";
                          }
                                    
                            },"width": "10%"
                        },
                        {
                            "data": "ID", "render": function (data, type, row) {
                                if (row.check) {
                                    return "<botton class='btn btn-danger ED' style='margin-top:3px' onclick='DeleteEmployeeVacation(" + data + ")'><span class='glyphicon glyphicon-trash'></span></botton>"
                                } else {
                                    return "";
                                }
                            },"width": "10%"
                        }
                    ], "language": GetLanguage()
                });
    });
    function checkDates(FromDate, ToDate) {
        debugger;
        if (FromDate == "" || ToDate == "") {
            return false;
        } else {
            var match1 = /(\d+)\/(\d+)\/(\d+)/.exec(ToDate)
            var end_date = new Date(match1[3], match1[2], match1[1]);
            var match2 = /(\d+)\/(\d+)\/(\d+)/.exec(FromDate)
            var start_date = new Date(match2[3], match2[2], match2[1]);
            if (end_date < start_date) {
                return true
            }
            return false;
        }
        
    }
    function CalculateDays(FromDate, ToDate) {
        debugger;
        if (FromDate != "" && ToDate!="") {
           $.ajax({
               type: "post",
               url: "/EmployeeVacation/CalculateDays?FromDate=" + FromDate + "&ToDate=" + ToDate,

            success: function (response) {
               $("#NODays").val(response.data)
            }
        }); 
                
        }
    }
     function GetLanguage() {
        debugger;
                var EN = {
                    "sEmptyTable": "No data available in table",
                    "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                    "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                    "sInfoFiltered": "(filtered from _MAX_ total entries)",
                    "sInfoPostFix": "",
                    "sInfoThousands": ",",
                    "sLengthMenu": "Show _MENU_ entries",
                    "sLoadingRecords": "Loading...",
                    "sProcessing": "Processing...",
                    "sSearch": "Search:",
                    "sZeroRecords": "No matching records found",
                    "oPaginate": {
                        "sFirst": "First",
                        "sLast": "Last",
                        "sNext": "Next",
                        "sPrevious": "Previous"
                    },
                    "oAria": {
                        "sSortAscending": ": activate to sort column ascending",
                        "sSortDescending": ": activate to sort column descending"
                    }
                };
                var AR =
                {
                    "sEmptyTable": "ليست هناك بيانات متاحة في الجدول",
                    "sLoadingRecords": "جارٍ التحميل...",
                    "sProcessing": "جارٍ التحميل...",
                    "sLengthMenu": "أظهر _MENU_ مدخلات",
                    "sZeroRecords": "لم يعثر على أية سجلات",
                    "sInfo": "إظهار _START_ إلى _END_ من أصل _TOTAL_ مدخل",
                    "sInfoEmpty": "يعرض 0 إلى 0 من أصل 0 سجل",
                    "sInfoFiltered": "(منتقاة من مجموع _MAX_ مُدخل)",
                    "sInfoPostFix": "",
                    "sSearch": "ابحث:",
                    "sUrl": "",
                    "oPaginate": {
                        "sFirst": "الأول",
                        "sPrevious": "السابق",
                        "sNext": "التالي",
                        "sLast": "الأخير"
                    }
                };
                let LangFlag = @(System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.IsRightToLeft ?"true":"false");
                return (LangFlag == false ? EN : AR);
            }
    function DeleteEmployeeVacation(id) {
      $("#myModelDelete").modal('show');
        DeleteID = id;
            }
    $("#DeleteEmployeeVacation").click(function () {

        $.ajax({
            type: "post",
            url: "/EmployeeVacation/deleteEmployeeVacation?id=" + DeleteID,

            success: function (response) {
                $("#myModelDelete").modal("hide");
                $("#EmployeeVacationTB").DataTable().ajax.reload();
                toastr.success('@Messages.EmployeeVacationDeleted ', '', { timeOut: 4000 })
            },
            error: function () {
               
                toastr.error('@Messages.NotSuccessfulOperation', '@Messages.ErrorDeletion ', { timeOut: 3000 });
            }
        });
    });
    function EditEmployeeVacation(EditedID) {
         var url = "/EmployeeVacation/getEmployeeVacationByID?id=" + EditedID;
        $.ajax({
            type: "GET",
            url: url,
            success: function (rs) {
                $("#modalTitle").html("@Resources.editEmployeeVaction");
                $("#SaveEmployeeVacation").html("@Resources.Edit");
                $("#myModel").modal('show');
                 $("span[class*='error']").text("")
                 $("#form")[0].reset();
                $("#EmployeeVacationID").val(rs.data.ID)
                $("#EmployeeId").val(rs.data.EmployeeId);
                $("#EmpID").val(rs.data.EmpName);
                $("#HolidayTypeId").val(rs.data.HolidayTypeId);
                $("#NODays").val(rs.data.NODays);
                $("#Notes").val(rs.data.Notes);
                $("#FromDate").val(dateFormat(new Date(parseInt((rs.data.FromDate).match(/\d+/)[0]))));
                $("#ToDate").val(dateFormat(new Date(parseInt((rs.data.ToDate).match(/\d+/)[0]))));
            }
        });
            }
     function dateFormat(d) {
                return  (d.getDate() + "").padStart(2, "0")
                    + "/" +((d.getMonth() + 1) + "").padStart(2, "0")
                    + "/" + d.getFullYear();
    }
    </script>
}

